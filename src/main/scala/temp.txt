package Pathfinder.view
import Pathfinder.util.{KeyUtilities, Movement}
import Pathfinder.model.CellType._
import Pathfinder.model.Maze
import javafx.scene.image.ImageView
import javafx.scene.input.KeyEvent
import javafx.scene.layout.{BorderPane, GridPane}
import scalafx.Includes._
import scalafx.scene.input.KeyCode
import scalafxml.core.macros.sfxml

import scala.annotation.tailrec
import scala.collection.mutable.ListBuffer

@sfxml
class MainGameController{
  var mainGameRoot: Option[BorderPane] = None
  var pathfinderObject: Option[ImageView] = None
  private var pressedKey: ListBuffer[KeyCode] = ListBuffer()
  private var isObjectMoving: Boolean = false
  private var maze: Maze = _

  // Initialize method
  def initialize(): Unit = {
    // Set up the key event handling
    mainGameRoot.getOrElse(throw new RuntimeException("Main game root is not defined"))
      .setOnKeyPressed((event: KeyEvent) => onKeyPressed(event))

    // Ensure the root is focusable
    mainGameRoot.getOrElse(throw new RuntimeException("Main game root is not defined"))
      .requestFocus()

    // Find the pathfinderObject in the maze
    pathfinderObject = Option(mainGameRoot.getOrElse(throw new RuntimeException("Main game root is not defined"))
      .lookup("#pathfinderObject").asInstanceOf[ImageView])

    // Initialize the maze
    maze = new Maze(mainGameRoot.getOrElse(throw new RuntimeException("Main game root is not defined"))
      .lookup("#maze").asInstanceOf[GridPane])

  }

  // Method to handle key presses
  def onKeyPressed(event: KeyEvent): Unit = {
    if (!isObjectMoving) {
      handleKeyPress(event.getCode)
    }
  }

  // Handle key press
  private def handleKeyPress(keyCode: KeyCode): Unit = {
    // Check if the pressed key is one of the valid keys
    if (KeyUtilities.isValidKey(keyCode)) {
      pressedKey = pressedKey += keyCode
      println(s"Key pressed: ${keyCode.getName}")

      // Check if 4 keys are collected
      if (pressedKey.length == 4) {
        // Interpret the sequence of keys
        val movements = interpretKeySequence(pressedKey)
        // Move the object based on the interpreted sequence
        println("Moving Object")
        moveObject(movements)
      }
    }
  }

  // Interpret the sequence of keys and create a list of movements
  private def interpretKeySequence(keys: ListBuffer[KeyCode]): ListBuffer[Movement.Movement] = {
    keys.flatMap {
      case KeyCode.Left => Some(Movement.Left)
      case KeyCode.Right => Some(Movement.Right)
      case KeyCode.Up => Some(Movement.Up)
      case KeyCode.Down => Some(Movement.Down)
      case _ => None
    }
  }

  // Simulate moving object based on key inputs
  private def moveObject(movements: ListBuffer[Movement.Movement]): Unit = {
    isObjectMoving = true
    // Check if the pathfinderObject is defined
    val mainObject = pathfinderObject.getOrElse(throw new RuntimeException("Pathfinder object is not defined"))
    // Get the current column index and row index of the pathfinderObject
    //    val rowIndex = GridPane.getRowIndex(mainObject)
    //    val columnIndex = GridPane.getColumnIndex(mainObject)
    //    println(s"Starting position: row $rowIndex, column $columnIndex")

    // Recursive function for continuous left movement
    //    @tailrec
    def moveLeft(mainObject: ImageView, rowIndex: Int, columnIndex: Int): Unit = {
      val nextObjectColumn = columnIndex - 1
      val nextObjectRow = rowIndex

      // Check if the new column index is valid
      val cellType = maze.getCellType(nextObjectRow, nextObjectColumn)
      println(s"Cell type: $cellType")

      cellType match {
        case Some(node) if node == Wall =>
          // Wall image found
          println(s"You hit a wall at row $nextObjectRow, column $nextObjectColumn!")
        case Some(node) if node == Exit =>
          // Exit image found
          println(s"You reached the exit at row $nextObjectRow, column $nextObjectColumn!")
        case None =>
          // Handle the case where no node is found
          GridPane.setColumnIndex(mainObject, columnIndex - 1)
          // Continue moving left recursively
          moveLeft(mainObject, nextObjectRow, nextObjectColumn)
      }
    }

    def moveRight(mainObject: ImageView, rowIndex: Int, columnIndex: Int): Unit = {
      val nextObjectColumn = columnIndex + 1
      val nextObjectRow = rowIndex

      // Check if the new column index is valid
      val cellType = maze.getCellType(nextObjectRow, nextObjectColumn)
      println(s"Cell type: $cellType")

      cellType match {
        case Some(node) if node == Wall =>
          // Wall image found
          println(s"You hit a wall at row $nextObjectRow, column $nextObjectColumn!")
        case Some(node) if node == Exit =>
          // Exit image found
          println(s"You reached the exit at row $nextObjectRow, column $nextObjectColumn!")
        case None =>
          // Handle the case where no node is found
          GridPane.setColumnIndex(mainObject, columnIndex + 1)
          // Continue moving right recursively
          moveRight(mainObject, nextObjectRow, nextObjectColumn)
      }
    }

    def moveUp(mainObject: ImageView, rowIndex: Int, columnIndex: Int): Unit = {
      val nextObjectColumn = columnIndex
      val nextObjectRow = rowIndex - 1

      // Check if the new row index is valid
      val cellType = maze.getCellType(nextObjectRow, nextObjectColumn)
      println(s"Cell type: $cellType")

      cellType match {
        case Some(node) if node == Wall =>
          // Wall image found
          println(s"You hit a wall at row $nextObjectRow, column $nextObjectColumn!")
        case Some(node) if node == Exit =>
          // Exit image found
          println(s"You reached the exit at row $nextObjectRow, column $nextObjectColumn!")
        case None =>
          // Handle the case where no node is found
          GridPane.setRowIndex(mainObject, rowIndex - 1)
          // Continue moving up recursively
          moveUp(mainObject, nextObjectRow, nextObjectColumn)
      }
    }

    def moveDown(mainObject: ImageView, rowIndex: Int, columnIndex: Int): Unit = {
      val nextObjectColumn = columnIndex
      val nextObjectRow = rowIndex + 1

      // Check if the new row index is valid
      val cellType = maze.getCellType(nextObjectRow, nextObjectColumn)
      println(s"Cell type: $cellType")

      cellType match {
        case Some(node) if node == Wall =>
          // Wall image found
          println(s"You hit a wall at row $nextObjectRow, column $nextObjectColumn!")
        case Some(node) if node == Exit =>
          // Exit image found
          println(s"You reached the exit at row $nextObjectRow, column $nextObjectColumn!")
        case None =>
          // Handle the case where no node is found
          GridPane.setRowIndex(mainObject, rowIndex + 1)
          // Continue moving down recursively
          moveDown(mainObject, nextObjectRow, nextObjectColumn)
      }
    }

    // Process each movement in the sequence
    movements.foreach {
      case Movement.Left => moveLeft(mainObject, GridPane.getRowIndex(mainObject), GridPane.getColumnIndex(mainObject))
      case Movement.Right => moveRight(mainObject, GridPane.getRowIndex(mainObject), GridPane.getColumnIndex(mainObject))
      case Movement.Up => moveUp(mainObject, GridPane.getRowIndex(mainObject), GridPane.getColumnIndex(mainObject))
      case Movement.Down => moveDown(mainObject, GridPane.getRowIndex(mainObject), GridPane.getColumnIndex(mainObject))
    }

    // Reset key inputs for the next set of movements
    pressedKey.clear()
    // Set flag to indicate object has stopped moving
    isObjectMoving = false
  }
}